==========================
Cron is the Wrong Solution
==========================

.. post:: 2012-03-08
   :author: tychoish
   :tags: linux, systems-administration, software

Cron is great, right? For the uninitiated, if there are any of you left,
Cron is a task scheduler that makes it possible to run various scripts
and programs at specified intervals. This means that you can write
programs that "*do a thing*\ " in a stateless way, set them to run
regularly, without having to consider any logic regarding when to run,
or any kind of state tracking. Cron is simple and the right way to do a
great deal of routine automation, but there are caveats.

At times I've had *scads* of cron jobs, and while they work, from time
to time I find myself going through my list of cron tasks on various
systems and removing most of them or finding *better ways.*

The problems with cron are simple:

- Its often a sledge hammer, and it's very easy to put something in
  cron job that needs a little more delicacy.

- While it's *possible* to capture the output of cron tasks (typically
  via email,) the feedback from cronjobs is hard to follow. So it's
  hard to detect errors, performance deterioration, inefficiencies, or
  bugs proactively.

- Its too easy to cron something to run every minute or couple of
  minutes. A task that seems relatively lightweight when you run it
  once can end up being expensive in the aggregate when they have to
  run a thousand times a day.

  This isn't to say that there aren't places where using cron isn't
  absolutely the right solution, but there are better solutions. For
  instance:

- Include simple tests and logic for the cron task to determine if it
  *needs* to run before actually running.

- Make things very easy to invoke or on demand rather than
  automatically running them regularly.

  I've begun to find little scripts and
  `dmenu <http://tools.suckless.org/dmenu/>`__, or an easily called
  emacs-lisp function to be preferable to a cron job for a lot of tasks
  that I'd otherwise set in a cron job.

- Write real daemons. It's hard and you have to make sure that they
  don't error out or quit unexpectedly--which requires at least
  primitive monitoring--but a little bit of work here can go a long
  way.

Onward and Upward!
